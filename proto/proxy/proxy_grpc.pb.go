// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongoProxyClient is the client API for MongoProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoProxyClient interface {
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
}

type mongoProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoProxyClient(cc grpc.ClientConnInterface) MongoProxyClient {
	return &mongoProxyClient{cc}
}

func (c *mongoProxyClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/proxy.MongoProxy/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoProxyClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/proxy.MongoProxy/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoProxyServer is the server API for MongoProxy service.
// All implementations must embed UnimplementedMongoProxyServer
// for forward compatibility
type MongoProxyServer interface {
	Insert(context.Context, *InsertRequest) (*InsertResponse, error)
	Find(context.Context, *FindRequest) (*FindResponse, error)
	mustEmbedUnimplementedMongoProxyServer()
}

// UnimplementedMongoProxyServer must be embedded to have forward compatible implementations.
type UnimplementedMongoProxyServer struct {
}

func (UnimplementedMongoProxyServer) Insert(context.Context, *InsertRequest) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedMongoProxyServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedMongoProxyServer) mustEmbedUnimplementedMongoProxyServer() {}

// UnsafeMongoProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoProxyServer will
// result in compilation errors.
type UnsafeMongoProxyServer interface {
	mustEmbedUnimplementedMongoProxyServer()
}

func RegisterMongoProxyServer(s grpc.ServiceRegistrar, srv MongoProxyServer) {
	s.RegisterService(&MongoProxy_ServiceDesc, srv)
}

func _MongoProxy_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoProxyServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.MongoProxy/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoProxyServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoProxy_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoProxyServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.MongoProxy/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoProxyServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoProxy_ServiceDesc is the grpc.ServiceDesc for MongoProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.MongoProxy",
	HandlerType: (*MongoProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _MongoProxy_Insert_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _MongoProxy_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proxy/proxy.proto",
}
